#!/usr/bin/perl

use strict;
use warnings;

use File::Spec;
use File::Glob q(glob);
use File::Basename qw(dirname basename);
use Text::Table;
use Text::ParseWords qw(shellwords);
use Getopt::Long
    qw(:config posix_default gnu_compat require_order bundling no_ignore_case);

use constant RED     => '31;1';
use constant GREEN   => '32;1';
use constant YELLOW  => '33;1';
use constant BLUE    => '34;1';
use constant MAGENTA => '35;1';
use constant CYAN    => '36;1';
use constant GRAY    => '30;1';
use constant DEFAULT => '0';

use constant DATE        => 'DATE';
use constant REF         => 'REF';
use constant ACCOUNT     => 'ACCOUNT';
use constant ACCOUNTDATE => 'ACCOUNT_DATE';
use constant MEMO        => 'MEMO';
use constant DESCRIPTION => 'DESCRIPTION';
use constant AMOUNT      => 'AMOUNT';
use constant BALANCE     => 'BALANCE';
use constant LINK        => 'LINK';
use constant TAG         => 'TAG';

use constant SEP => "\x01";

sub sum;
sub usage;
sub iusage;
sub fatal;
sub note;
sub uniq;
sub setvar;

my $rxaccount = qr/\@(\S+)/;
my $rxref     = qr/\*(\S+)/;
my $rxdate    = qr/[0-2][0-9][0-9][0-9]-?[01][0-9]-?[0-3][0-9]/;  # Allow 0000-00-00 as a placeholder
my $rxmemo    = qr/\[([^\[\]]*)\]/;
my $rxdescrip = qr/\{([^\{\}]*)\}/;
my $rxamount  = qr/([-+])([0-9]*\.[0-9][0-9])/;
my $rxbalance = qr/=([-+]?[0-9]*\.[0-9][0-9])/;
my $rxlink    = qr/\<([^\<\>]*)\>/;
my $rxtag     = qr/\:(\S+)/;

my %account;
my %group;
my $verbose;
my %var;
my @sets;
my $next_set = 1;
my $running;
my @rules;
my %check;
my @entries;

my $root = File::Spec->rel2abs($ENV{'FINANCES'} || glob('~/finances') || fatal "Can't determine root");
chdir $root or fatal "Can't chdir $root: $!";

@ARGV = qw(edit) if !@ARGV;

foreach ($ARGV[0]) {
    unshift(@ARGV, 'find'), last if m{^[/@]|^\d{4}};
}

my $sub = __PACKAGE__->can('cmd_' . shift @ARGV) || usage;
$sub->();

sub cmd_find {
    print $_, "\n" for filter_journal(@ARGV);
}

sub cmd_sum {
    my ($sorter, $reverse);
    my $only = sub { 1 };
    my %sortcmp = (
        'amount' => sub { $a->[0] <=> $b->[0] },
        'code' => sub { $a->[1] cmp $b->[1] },
        'class' => sub { $a->[2] cmp $b->[2] },
        'description' => sub { $a->[3] cmp $b->[3] },
    );
    GetOptions(
        's|sort-by=s' => sub {
            $sorter = $sortcmp{$_[1]} or usage;
        },
        'r|reverse' => \$reverse,
        'e|expenses' => sub {
            $only = sub {
                my %item = @_;
                $item{'class'} =~ /^expenses(:|$)/;
            };
        },
        'i|income' => sub {
            $only = sub {
                my %item = @_;
                $item{'class'} =~ /^income(:|$)/;
            },
        },
    ) or usage;
    read_accounts();
    my $tb = make_table({'title' => 'Amount', 'align_title' => 'right'}, qw(Code Class Description));
    my @rows;
    my %sum;
    my $total = 0;
    while (<STDIN>) {
        chomp;
        next if /^\s*(#.*)?$/;  # Not a transaction
        my ($account, $amount);
        foreach (tokenize($_)) {
            my ($type, $token) = @$_;
            if ($type eq ACCOUNT) {
                $account = $token;
            }
            elsif ($type eq AMOUNT) {
                $sum{$account} += $token;
            }
        }
        #while (/ (\@\S+) ([-+]\d+\.\d\d)\b/g) {
        #    $sum{$1} += $2;
        #}
    }
    foreach (sort keys %sum) {
        my $amount = $sum{$_};
        my $account = $account{$_};
        my ($aclass, $adesc) =
            $account ? @$account{qw(class description)}
                     : qw(-- --)
                     ;
        next if !$only->(
            'class' => $aclass,
            'description' => $adesc,
            'amount' => $amount,
        );
        push @rows, [ sprintf('%+11.2f', $amount), $_, $aclass, $adesc ];
        $total += $amount;
    }
    if (defined $sorter) {
        @rows = sort { &$sorter } @rows;
        @rows = reverse @rows if $reverse;
    }
    $total = sprintf('%+11.2f', $total);
    $total =~ s/\+(?=0\.00$)/ /;
    push @rows, [ $total, 'Total' ];
    $tb->load(@rows);
    print_table($tb);
}

sub cmd_data {
    my $long;
    GetOptions(
        'l' => \$long,
    ) or usage;
    my ($date, $acode, $entries, $aclass);
    my $filter = sub { 1 };
    read_accounts();
    if (@ARGV) {
        if ($ARGV[0] =~ /^[12][0-9]{3}(?:[-0-3]|$)/) {
            $filter = make_date_filter(\$date, @ARGV);
        }
        elsif ($ARGV[0] =~ /^@/) {
            $filter = make_account_filter(\$acode, @ARGV);
        }
        else {
            usage;
        }
    }
    read_journal();
    foreach my $trx (@entries) {
        my $tdate = $trx->{'date'};
        my $tmemo = $trx->{'memo'} // '[]';
        $tmemo =~ s/(?<=\[)\s+|\s+(?=\])//g;
        while (($acode, $entries) = each %{ $trx->{'entries'} }) {
            my $account = $account{$acode};
            $aclass = $account->{'class'};
            foreach my $entry (@$entries) {
                my $edate = $entry->{'date'};
                my $eamount = $entry->{'amount'} or next;
                $date = $edate || $tdate;
                next if !$filter->();
                if ($long) {
                    my $descrip = $entry->{'description'} // '{}';
                    $descrip =~ s/(?<=\{)\s+|\s+(?=\})//g;
                    printf "E %s %s %s %s %s\n", $date, $eamount, $aclass // $acode, $tmemo, $descrip;
                }
                else {
                    printf "E %s %s %s\n", $date, $eamount, $aclass // $acode;
                }
            }
        }
    }
}

sub cmd_accounts {
    my $all;
    GetOptions(
        'a' => \$all,
    ) or usage;
    read_accounts();
    my $tb = make_table(qw(Code Class Path Description));
    my @rows;
    foreach my $acode (sort grep { /^\@/ } keys %account) {
        my $account = $account{$acode};
        my ($aclass, $apath, $adesc) = @$account{qw(class path description)};
        if (!defined $apath) {
            next if !$all;
            $apath = '--';
        }
        push @rows, [ $acode, $aclass, $apath, $adesc ];
    }
    $tb->load(sort { $a->[0] cmp $b->[0] } @rows);
    print_table($tb);
}

sub cmd_categories {
    my $rx = qr/./;
    if (@ARGV) {
        $ARGV[0] =~ m{^/(.+)/$} or usage;
        $rx = qr/$1/i;
    }
    read_accounts();
    my $tb = make_table(qw(Code Class Description));
    my @rows;
    foreach my $acode (sort grep { /^\@/ } keys %account) {
        my $account = $account{$acode};
        next if defined $account->{'path'};
        my ($aclass, $adesc) = @$account{qw(class description)};
        push @rows, [ $acode, $aclass, $adesc ]
            if grep { $_ =~ $rx } $acode, $aclass, $adesc;
    }
    $tb->load(sort { $a->[0] cmp $b->[0] } @rows);
    print_table($tb);
}

sub cmd_edit {
    exec($ENV{'VISUAL'} || $ENV{'EDITOR'} || 'vi', "$root/journal");
}

sub cmd_stm { goto &cmd_statements }

sub cmd_statements {
    my ($verbose, $period);
    GetOptions(
        'p=s' => \$period,
        'v' => \$verbose,
    );
    if (defined $period) {
        $period =~ /^(\d\d\d\d)(?:-?(\d\d)?)$/ or usage;
        $period = $1; $period .= $2 if defined $2;
    }
    read_accounts();
    my @accounts = @ARGV;
    @accounts = sort grep { !/\@/ } keys %account if !@accounts;
    foreach (@accounts) {
        my $account = $account{$_}
            or fatal "Unrecognized account: $_";
        my ($apath, $aclass, $acode) = @$account{qw(path class code)};
        if (!defined $apath) {
            print STDERR "Warning: not a statement account: $_\n" if @ARGV;
            next;
        }
        my @statements = sort map { basename($_) } grep { -d } glob("$apath/statements/*");
        next if !@statements;
        note "<<[$apath]>>", MAGENTA if $verbose;
        my $prevmon;
        foreach (@statements) {
            my $len = length("$apath/statements/$_/");
            my @files = map { substr($_, $len) } grep { -f } glob("$apath/statements/$_/*");
            if (/^(\d\d\d\d)-(\d\d)/) {
                my ($y, $m) = ($1, $2);
                if (defined($period)) {
                    next if substr($period, 0, 4) ne $y;
                    next if length($period) > 4 && substr($period, 4, 2) ne $m;
                }
                else {
                    my $mon = $y * 12 + $m;
                    if ($verbose && defined($prevmon) && $mon > $prevmon + 1) {
                        note '<<???>>', YELLOW;
                    }
                    $prevmon = $mon;
                }
                print join(' ', $_, $acode, @files), "\n";
                #print $_, ' ', $apath, "\n";
            }
        }
    }
}

sub cmd_view {
    #@ view ACCOUNT STATEMENT :: view a statement
    usage if @ARGV < 1 || @ARGV > 2;
    my ($acc, $period) = @ARGV;
    read_accounts();
    $period =~ tr/-//d if defined $period;
    my @statements = reverse statements($acc, $period);
    if (my ($pdf) = grep { /\.pdf$/ } @statements) {
        system('mupdf', $pdf);
    }
    elsif (my ($txt) = grep { /\.pdf$/ } @statements) {
        system('vim', $txt);
    }
    elsif (@statements) {
        print STDERR "I don't know how to show you $statements[0]\n";
    }
    else {
        print STDERR "No statements meet those criteria\n";
    }
}

sub cmd_help {
    #@ help :: show helpful information
    print STDERR <<'EOS';
usage: na COMMAND [ARG...]
commands:
EOS
    my $w = 0;
    my ($commands, $aliases) = commands();
    my $table = Text::Table->new(\'  ', 'command', \'  ', 'description');
    foreach (sort { $a->{'name'} cmp $b->{'name'} } @$commands) {
        my ($name, $args, $descrip) = @$_{qw(name args description)};
        $table->add(join(' ', $name, @{ $args || [] }), $descrip || '');
    }
    print $table->body;
    $table = Text::Table->new(\'  ', 'alias', \' = ', 'command');
    print "aliases:\n";
    foreach (sort keys %$aliases) {
        $table->add($_, $aliases->{$_});
    }
    print $table->body;
}

sub cmd_import {
    GetOptions(
        'v' => \$verbose,
    );
    read_accounts();
    @ARGV = sort grep { !/\@/ } keys %account if !@ARGV;
    open my $fh, '+>>', 'journal'
        or fatal "Can't open journal: $!";

    foreach my $apath (@ARGV) {
        my @files = sort { -M $b <=> -M $a } grep -f, glob("$apath/inbox/*");
        next if !@files;
        if (!-d "$apath/statements") {
            note '<<skip>>', YELLOW if $verbose;
            next;
        }
        note "<<[$apath]>>", MAGENTA;
        my %cdate;
        foreach my $f (@files) {
            my ($stmt, $cdate, $trx);
            my $fname = basename($f);
            my $ok = eval {
                $stmt = read_statement($apath, $f);
                fatal "can't parse" if !$stmt;
                ($cdate, $trx) = @$stmt{qw(cdate transactions)};
                fatal 'no transactions found' if !@$trx;
                my $sdir = "$apath/statements/$cdate";
                my @done = glob("$sdir/*");
                fatal 'already processed?' if @done;
                my $s = "$sdir/$fname";
                fatal "mkdir $s: $!" if !-d $sdir && !mkdir $sdir;
                print $fh
                    "# Statement $cdate $apath\n",
                    @$trx,
                    "\n";
                rename $f, $s or fatal "rename $f $s: $!";
                note "  <<ok>> $cdate $fname";
            };
            if (!$ok) {
                my ($msg) = split /\n/, $@;
                $msg =~ s/ at .+ line \d+\.$//;
                $cdate = '????-??-??' if !defined $cdate;
                note " <<err>> $cdate $fname :: $msg", RED;
            }
        }
    }
}

sub cmd_apply {
    # Apply rules
    my ($rules_file, $checks_file) = qw(rules checks);
    my ($dry_run, $verbose, $from_stdin, $print_all, $debug);
    my $memo_fmt = '%-36s';
    GetOptions(
        'f=s' => \$rules_file,
        'c=s' => \$checks_file,
        'n'   => \$dry_run,
        'v'   => \$verbose,
        'i'   => \$from_stdin,
        'a'   => \$print_all,
        'd'   => \$debug,
        'm=s' => \$memo_fmt,
    ) or usage;
    $verbose = 1 if $debug;
    $memo_fmt =~ s/^\[?/[/;  # Make sure the specified
    $memo_fmt =~ s/\]?$/]/;  # format is bracketed
    read_rules($rules_file);
    read_checks($checks_file);
    if ($dry_run) {
        open STDIN, '<', 'journal' or fatal "Can't open journal: $!" if !$from_stdin;
    }
    else {
        rename 'journal', 'journal-' or fatal "Can't move journal: $!";
        open STDIN,  '<', 'journal-' or fatal "Can't open journal-: $!";
        open STDOUT, '>', 'journal+' or fatal "Can't open journal+: $!";
    }
    my $str;
    while (<STDIN>) {
        printf STDERR '%7d  %s', $., $_ if $ENV{'NA_TRACE'};
        chomp;
        next if /^($rxdate\s+)?\s*(#.*)?$/;  # Blank line, comment, or a bare date
        s/ \@unknown$//;
        s/ \@\@/ @/g;
        $str = $_;
        my @tokens = eval { tokenize($_) };
        if (!@tokens) {
            if (!$dry_run) {
                rename('journal-', 'journal')
                    or print STDERR "Can't put journal back in place: $!";
                unlink('journal+');
            }
            fatal "unparsed: line $.: $_";
        }
        my $date = shift(@tokens)->[1];
        shift @tokens if @tokens && $tokens[0][1] eq '[]';
        ### if (grep { $_->[0] eq MEMO } @tokens) {
        ###     # Already done
        ###     print STDERR "skip: $str\n" if $debug;
        ###     next;
        ### }
        if (/\s$rxaccount\s.* $rxaccount\b/) {
            my $sum = sum map { $_->[0] eq AMOUNT ? $_->[1] : 0 } @tokens;
            next if abs($sum) < 0.01;
        }
        my @descrips = map { $_->[1] } grep { $_->[0] eq DESCRIPTION && $_->[1] ne '{}' } @tokens;
        if (!@descrips || $descrips[0] !~ $rxdescrip) {
            print STDERR "huh? $str\n" if $debug;
            next;
        }
        my $descrip = $1;
        next if !length($descrip);
        my ($check_num, $append);
        my @refs = grep { $_->[0] eq REF } @tokens;
        if (@refs) {
            @tokens = grep { $_->[0] ne REF } @tokens;
            foreach (@refs) {
                $check_num = $_->[1];
                if (my $ref = $check{$check_num}) {
                    $append = $ref;
                    @tokens = grep { $_->[0] ne MEMO } @tokens;
                    last;
                }
            }
        }
        foreach my $rule (@rules) {
            last if defined $append;
            my ($memo, $code, $src) = @$rule;
            local $_ = $descrip;
            if (defined($append = $code->())) {
                if ($debug) {
                    print STDERR 'match: ', $str, "\n";
                    print STDERR "rule:\n";
                    print STDERR '  ', $_, "\n" for split /\n/, $src;
                    print STDERR "\n";
                }
            }
        }
        if (!defined $append) {
            print STDERR 'no match: ', $str, "\n" if $debug;
            $append = '[] @unknown';
        }
        my @append = tokenize('2001-01-01 ' . $append);
        next if !@append;
        shift @append;  # Drop the phony date
        next if !@append;
        my @out = ( $date );
        my @memo  = grep { $_->[0] eq MEMO } @append;
        my @other = grep { $_->[0] ne MEMO } @append;
        @memo = ([ MEMO, '[]' ]) if !@memo;
        @memo = () if grep { $_->[0] eq MEMO } @tokens;
        my $fmt = $memo_fmt;
        $fmt =~ s/(\d+)/$1 - length($check_num) - 1/eg if defined $check_num;  # Leave room for the check number
        foreach (@memo) {
            $_->[1] =~ s/\[ *([^\[\]]+) *\]/sprintf($fmt, $1)/e;
        }
        push @out, $_->[1] for @refs, @memo, @tokens, @other;
        my $sum = sum map { $_->[0] eq AMOUNT ? $_->[1] : 0 } ( @tokens, @other );
        push @out, sprintf('%+.2f', -$sum) if abs($sum) >= 0.01;
        $_ = join(' ', @out);
    }
    continue {
        if ($dry_run) {
            print $_, "\n" if !/^\s*(?:#.*)?$/ && defined $str && ($print_all || $_ ne $str);
        }
        else {
            print $_, "\n";
        }
        #print $_, "\n" if !$dry_run || !defined($str) || $_ ne $str;
    }
    if (!$dry_run) {
        rename 'journal+', 'journal'  or fatal "Can't rename journal+: $!";
        unlink 'journal~';
        rename 'journal-', 'journal~' or fatal "Can't rename journal-: $!";
    }
}

sub cmd_export {
    my $format = 'yaml';
    GetOptions(
        't|format=s' => \$format,
    ) or usage;
    usage if @ARGV < 1;
    my $spec = shift @ARGV;
    my $formatter = __PACKAGE__->can('export_'.$format) or fatal "Unrecognized export format: $format";
    my $exporter = __PACKAGE__->can('data_'.$spec) or fatal "Unrecognized export spec $spec";
    $formatter->($exporter->(@ARGV));
}

sub cmd_tokenize {
    open my $fh, '<', 'journal' or fatal "Can't open journal: $!";
    while (<$fh>) {
        chomp;
        next if /^($rxdate\s+)?\s*(#.*)?$/;  # Not a transaction
        my $str = $_;
        s/ \@unknown$//;
        s/ \@\@/ @/g;
        my @tokens = tokenize($_);
        if (!@tokens) {
            print STDERR "# unparsed: $str\n";
            next;
        }
        print join(' ', @$_), "\n" for @tokens;
        print "\n";
    }
}

sub cmd_validate {
    eval {
        print STDERR 'Reading accounts ... ';
        read_accounts();
        print STDERR "OK\n";
        print STDERR 'Reading rules ...... ';
        read_rules('rules');
        print STDERR "OK\n";
        print STDERR 'Reading checks ..... ';
        read_checks('checks');
        print STDERR "OK\n";
        print STDERR 'Reading journal .... ';
        read_journal();
        print STDERR "OK\n";
        exit 0;
    };
    my ($err) = split /\n/, @$;
    $err ||= "line $.";
    print STDERR "Error: $@";
    exit 2;
}

# Data functions

sub data_accounts {
    my $format = shift;
    read_accounts();
    my @accounts;
    while (my ($k, $v) = each %account) {
        next if $k !~ s/^[@]//;
        next if !defined $v->{'path'};  # Not an account per se
        $v->{'code'} = $k;
        push @accounts, $v;
    }
    return sort { $a->{'code'} cmp $b->{'code'} } @accounts;
}

sub data_groups {
    my $format = shift;
    read_accounts();
    read_groups();
    return sort { $a->{'code'} cmp $b->{'code'} } values %group;
}

sub data_categories {
    my $format = shift;
    read_accounts();
    my @categories;
    while (my ($k, $v) = each %account) {
        next if $k !~ s/^[@]//;
        next if defined $v->{'path'};  # An account per se
        $v->{'code'} = $k;
        push @categories, $v;
    }
    return sort { $a->{'code'} cmp $b->{'code'} } @categories;
}

sub data_account {
    my $format = shift;
    my ($acode) = @_;
    read_accounts();
    my $account = $account{$acode} or fatal "No such account: $acode";
    return if $acode !~ s/^[@]//;
    $account->{'code'} = $acode;
    return $account;
}

sub data_statements {
    my $format = shift;
    my ($acode) = @_;
    read_accounts();
    my $account = $account{'@'.$acode};
    my $path = $account->{'path'} or fatal "Not an account: $acode";
    my @statements;
    foreach (glob("$root/$path/statements/*")) {
        next if !-d || !m{/(\d\d\d\d-\d\d-\d\d)$};
        push @statements, {
            'date' => $1,
        };
    }
    return @statements;
}

sub data_balances {
    my $format = shift;
    read_accounts();
    open my $fh, '<', 'balances' or fatal "open balances: $!";
    my %account_ym_balance;
    while (<$fh>) {
        next if !/^(\d\d\d\d)-(\d\d)-(\d\d) (\S+) (\S+)$/;
        $account_ym_balance{$5}{"$1-$2"} = [$3, $4];
    }
    my @balances;
    foreach my $a (sort keys %account_ym_balance) {
        my $account = $account{$a} or next;
        ($account->{'code'} = $a) =~ s/^[@]//;
        foreach my $ym (sort keys %{ $account_ym_balance{$a} }) {
            my $dbal = $account_ym_balance{$a}{$ym};
            my ($d, $b) = @$dbal;
            push @balances, {
                'account' => $account,
                'date' => "$ym-$d",
                'balance' => $b,
            };
        }
    }
    return @balances;
}

sub data_expenses {
    my $format = shift;
    read_journal();
    read_accounts();
    my %expense_account;
    while (my ($acode, $account) = each %account) {
        next if $acode !~ /^[@]/ || $account->{'class'} !~ /^expenses(?::.+)?$/;
        $expense_account{$acode} = $account;
    }
    my %class_ym_total;
    foreach my $e (@entries) {
        my $subentries = $e->{'entries'} or next;
        my $date = $e->{'date'};
        my $ym = substr($date, 0, 4) . '-' . substr($date, 5, 2);
        while (my ($k, $v) = each %$subentries) {
            my $account = $expense_account{$k}
                or next;
            $class_ym_total{$account->{'class'} || 'expenses:unknown'}{$ym} += $_->{'amount'} || 0 for @$v;
        }
        1;
    }
    1;
}

sub data_entries {
    my $format = shift;
    read_journal();
    return @entries;
}

sub data_flat {
    my $format = shift;
    read_journal();
    return map {
        my $date = $_->{'date'};
        my $memo = $_->{'memo'} || '[]';
        $memo =~ s/^\[ *| *\]$//g;
        my @out;
        while (my ($acode, $e) = each %{ $_->{'entries'} || {} }) {
            foreach my $a (@$e) {
                my $amt = $a->{'amount'}
                    or next;
                if ($format eq 'text') {
                    push @out, $date . ' ' . ($a->{'amount'} || next) . ' ' . $acode . ' ' . $memo;
                }
                else {
                    push @out, {
                        'date' => $date,
                        'amount' => $amt,
                        'account' => $acode,
                        'memo' => $memo,
                    };
                }
            }
        }
        @out;
    } @entries;
}

sub export_yaml {
    my $ok;
    eval {
        eval 'use YAML::XS qw(Dump); 1'
        or
        eval 'use YAML qw(Dump); 1'
        ;
        print Dump(@_);
        $ok = 1;
    };
    fatal "Can't export as YAML: $@" if !$ok;
}

sub export_text {
    print $_, "\n" for @_;
}

# Other functions

sub make_date_filter {
    my ($dateref, $d1, $dn) = @_;
    $d1 =~ s/^([12][0-9]{3})(?:-?([01][0-9])(?:-?([0-3][0-9]))?)?/sprintf('%04d-%02d-%02d', $1, $2||1, $3||1)/e;
    return sub { $$dateref ge $d1 } if !defined $dn;
    $dn =~ s/^([12][0-9]{3})(?:-?([01][0-9])(?:-?([0-3][0-9]))?)?/sprintf('%04d-%02d-%02d', $1, $2||12, $3||31)/e;
    return sub { $$dateref ge $d1 && $$dateref le $dn };
}

sub make_account_filter {
    my ($acoderef, $ac) = @_;
    my $account = $account{$ac};
    return sub {
        $account && $$acoderef eq $account->{'code'}
    };
}

sub make_table {
    my @head = map { $_, \SEP } @_;
    pop @head if @head;
    return Text::Table->new(@head);
}

sub print_table {
    my ($tb) = @_;
    print map { s/\x01/  /g; $_ } $tb->title, $tb->body_rule('-', SEP), $tb->body;
}

sub sum {
    my $n = 0;
    $n += $_ for @_;
    return $n;
}

sub note {
    my ($note, $color) = @_;
    $color ||= GREEN;
    $note =~ s/<</\e[${color}m/;
    $note =~ s/>>/\e[0m/;
    print STDERR $note, "\n";
}

sub read_statement {
    my ($apath, $f) = @_;
    local %ENV = %ENV;
    local $SIG{PIPE} = 'IGNORE';
    my $acode = $account{$apath}{'code'};
    my $adir = File::Spec->rel2abs($apath);
    while ($adir ge $root) {
        my $bin = "$adir/bin";
        $ENV{'PATH'} .= ':' . $bin if -e $bin;
        $adir = dirname($adir);
    }
    open my $fh, '-|', 'stmt2trx', $acode, $f
        or fatal "Can't exec stmt2trx: $!";
    my @trx = <$fh>;
    close $fh or fatal 'stmt2trx failed: ', $? >> 8;
    return if @trx < 1;
    return if shift(@trx) !~ /^statement odate=(\d{4}-\d\d-\d\d) cdate=(\d{4}-\d\d-\d\d)$/;
    my ($odate, $cdate) = ($1, $2);
    my %stmt = (
        'transactions' => [ sort { substr($a,0,10) cmp substr($b,0,10) } @trx ],
        'odate' => $odate,
        'cdate' => $cdate,
    );
    return \%stmt;
}

sub read_accounts {
    local $/ = "\n";
    open my $fh, '<', 'accounts' or die "open accounts: $!\n";
    while (<$fh>) {
        # @CODE CLASS {DESCRIP}
        # @CODE CLASS {DESCRIP} PATH
        next if !m{^\s*$rxaccount\s+(\S+)\s+$rxdescrip(?:\s+(\S+))?$}i;
        my ($acode, $aclass, $adescrip, $apath) = ($1, $2, trim($3), trim($4));
        undef $apath if defined($apath) && $apath eq '--';
        $aclass =~ s/:$/:$acode/;
        $account{'@'.$acode} = $account{$aclass} = {
            'code' => '@'.$acode,
            'class' => $aclass,
            'path' => $apath,
            'description' => $adescrip,
        };
        $account{$apath} = $account{$aclass} if defined $apath;
    }
}

sub trim {
    local $_ = shift;
    return if !defined;
    s/^\s+|\s+$//g;
    return $_;
}

sub tokenize {
    local $_ = shift;
    my @tokens;
    push(@tokens, [DATE, $1]) if s/^($rxdate)(?=\s)//;
    push(@tokens, [REF,  $1]) if s/^ ($rxref)(?=\s)//;
    while (s/^\s+(?=\S)//) {
        push(@tokens, [ACCOUNT,     $1]), next if s/^($rxaccount)//;
        push(@tokens, [MEMO,        $1]), next if s/^($rxmemo)//;
        push(@tokens, [DESCRIPTION, $1]), next if s/^($rxdescrip)//;
        push(@tokens, [AMOUNT,      $1]), next if s/^($rxamount)//;
        push(@tokens, [ACCOUNTDATE, $1]), next if s/^(&$rxdate)//;
        push(@tokens, [BALANCE,     $1]), next if s/^($rxbalance)//;
        push(@tokens, [LINK,        $1]), next if s/^($rxlink)//;
        push(@tokens, [TAG,         $1]), next if s/^($rxtag)//;
        die "Unrecognized token at line $.: $_\n";
    }
    die "Left-over tokens at line $.: $_\n" if /\S/;
    return @tokens;
}

sub read_rules {
    my ($f) = @_;
    open my $fh, '<', $f or die "open $f: $!\n";
    local $/ = '';
    while (<$fh>) {
        chomp;
        my $src = $_;
        s/^[ \t]*#.*//m;
        next if !/\S/;
        my ($head, @tail) = split /\n[ \t]+/;
        my $tail = join(' ', @tail);
        for ($tail) {
            s/\s+/ /msg;
            s/^ | $//g;
        }
        my @tokens = eval { tokenize('2000-01-01 ' . $tail) };
        if (!@tokens) {
            die "unparseable rule #$.:\n$src\n";
        }
        my $memo;
        if ($tail =~ s/$rxmemo/[]/) {
            $memo = $1;
        }
        else {
            $tail = "[] $tail";
        }
        foreach (split /\n/, $head) {
            next if /^\s*#/ || !/\S/;
            my ($rx, $defmemo) = parse_pattern($_);
            $defmemo = $memo if defined $memo;
            push @rules, [
                $defmemo,
                sub {
                    return if $_ !~ $rx;
                    my $m = $defmemo;
                    my @plus  = @+;
                    my @minus = @-;
                    $m =~ s/\$(\d+)/substr($_, $minus[$1], $plus[$1] - $minus[$1])/eg;
                    my $str = $tail;
                    $str =~ s/\[\]/[$m]/;
                    return $str;
                },
                $src,
            ];
        }
    }
    return @rules;
}

sub read_checks {
    my ($f) = @_;
    return if ! -e $f;
    open my $fh, '<', $f or die "open $f: $!\n";
    while (<$fh>) {
        next if /^\s*(?:#.*)?$/;  # Skip blank lines and comments
        chomp;
        die "Unrecognized check info: $_\n" if !/^\s*(\*\S+)\s+(\[[^\[\]]*\]+)\s+(\@\S+(?:\s+{.+})?)$/;
        ($check{$1} = "$2 $3") =~ s/\s+\]/]/;
    }
}

sub parse_pattern {
    local $_ = shift;
    die "invalid pattern: $_\n" if !m{^/(.+)/([a-z]*)$};
    my ($pat, $mod) = ($1, $2 || 'i');
    my $str = $pat;
    $str =~ tr{A-Za-z0-9 -'/,&}{}cd;
    $str =~ s/^ | $//g;
    $pat = '\b' . $pat . '\b' if $mod =~ s/w//;
    return qr/(?$mod)$pat/i, $str;
}

sub read_groups {
    my ($f) = @_;
    $f = 'groups' if !defined $f;
    my @tokens;
    open my $fh, '<', $f or die "open $f: $!\n";
    while (<$fh>) {
        s/\s+(?:#.*)?$//; # Skip blank lines and comments
        while (m{("[^"]*")|(\S+)}g) {
            push @tokens, $1 || $2;
        }
    }
    while (@tokens) {
        my $gcode = shift @tokens;
        $gcode =~ s/^%// or die "invalid group code: $gcode\n";
        my $descrip = ucfirst $gcode;
        die "group code $gcode not followed by other tokens\n" if !@tokens;
        my %member;
        my $tok = shift @tokens;
        if ($tok =~ /^"(.+)"$/) {
            $descrip = $1;
            die "group $gcode description out of place\n" if !@tokens;
            $tok = shift @tokens;
        }
        if ($tok eq '=') {
            die "truncated assignment in group $gcode\n" if !@tokens;
            $tok = shift @tokens;
            if ($tok =~ s/^!//) {
                delete $member{$_} for resolve($tok);
            }
            else {
                $member{$_} = 1 for resolve($tok);
            }
        }
        elsif ($tok eq '(') {
            while (@tokens) {
                $tok = shift @tokens;
                last if $tok eq ')';
                if ($tok =~ s/^!//) {
                    delete $member{$_} for resolve($tok);
                }
                else {
                    $member{$_} = 1 for resolve($tok);
                }
            }
        }
        $group{$gcode} = {
            'code' => $gcode,
            'description' => $descrip,
            'members' => [sort keys %member],
        };
    }
}

sub resolve {
    my ($sym) = @_;
    return $1 if $sym =~ /^[@](\S+)$/;
    $sym =~ s/(:?)\*$/length($1) ? ':' : '(?::.+)?$'/e;
    my $rx = qr/^$sym/;
    return map {
        $_->{'code'} && $_->{'class'} =~ $rx
            ? ( resolve($_->{'code'}) )
            : (                       )
    } values %account;
}

sub read_journal {
    my ($f) = @_;
    $f = 'journal' if !defined $f;
    open my $fh, '<', $f or die "open $f; $!\n";
    # @entries = ();
    while (<$fh>) {
        next if /^\s*(?:#.*)?$/;
        next if /^\d\d\d\d-\d\d-\d\d\s+#/;
        chomp;
        die "Bad line $. in journal: $_\n"
            if !/^\d/;
        push @entries, parse($_);
    }
}

sub filter_journal {
    open my $fh, '<', 'journal' or die "open journal: $!\n";
    my @lines = grep /^$rxdate /, <$fh>;
    chomp @lines;
    foreach my $c (@_) {
        if ($c =~ /^\@/) {
            @lines = grep { index($_, " $c ") > 0 } @lines;
            #@lines = grep { / $c / } @lines;
        }
        elsif ($c =~ /^[12]\d{3}/) {
            @lines = grep { index($_, $c) == 0 } @lines;
            #@lines = grep { substr($_, 0, length $c) eq $c } @lines;
        }
        elsif ($c =~ m{^/(.+)/$}) {
            my $rx = qr/$1/i;
            @lines = grep { $_ =~ $rx } @lines;
        }
    }
    close $fh;
    return @lines;
}

sub parse {
    my @tokens = tokenize(@_);
    my (%trx, $entry, $account);
    foreach (@tokens) {
        my ($t, $v) = @$_;
        if ($t eq ACCOUNT) {
            push @{ $trx{'entries'}{$v} ||= [] }, $entry = {};
            $account = $v;
        }
        elsif (defined $account) {
            $entry->{lc $t} = $v;
        }
        else {
            $trx{lc $t} = $v;
        }
    }
    return \%trx;
}

sub entry {
    my ($trx, $account) = @_;
    $trx->{$account};
}

sub has_account {
    my ($trx, $account) = @_;
    exists $trx->{$account};
}

sub statements {
    my ($account, $period) = @_;
    $account = $account{$account}
        || fatal "no such account: $account"
        if !ref $account;
    my ($apath, $aclass, $acode) = @$account{qw(path class code)};
    return if !defined $apath;  # Not a statement account
    my @dirs = sort map { basename($_) } grep { -d } glob("$apath/statements/*");
    my @statements;
    foreach my $dir (@dirs) {
        my $len = length("$apath/statements/$dir/");
        my @files = map { substr($_, $len) } grep { -f } glob("$apath/statements/$dir/*");
        if ($dir =~ /^(\d\d\d\d)-(\d\d)(?:-(\d\d))?$/) {
            my ($y, $m, $d) = ($1, $2, $3);
            if (defined($period)) {
                next if substr($period, 0, 4) ne $y;
                next if length($period) > 4 && substr($period, 4, 2) ne $m;
                next if defined $d
                     && length($period) > 6 && substr($period, 6, 2) ne $d;
            }
            push @statements, map { "$apath/statements/$dir/$_" } @files;
        }
    }
    return @statements;
}

sub uniq {
    my %seen;
    my @return;
    foreach (@_) {
        push @return, $_ if !$seen{$_}++;
    }
    return @return;
}

sub commands {
    open my $fh, '<', $0 or die "open $0: $!";
    my (@commands, %alias);
COMMAND:
    while (<$fh>) {
        my $name = $2;
        my %cmd = ('name' => $name);
        while (<$fh>) {
            $alias{$name} = $1, next COMMAND if /^\s*#\@=\s*(\w+)/;
            last if !/^\s*#\@ (\w+(?:\s+(.+))?) :: (.+)/;
            my ($args, $descrip) = ($2, $3);
            $cmd{'args'} = [ shellwords($args) ],
            $cmd{'description'} = $3;
        }
        push @commands, \%cmd;
    }
    $alias{'/PATT/'} = 'grep PATT';
    $alias{'@LOC'}   = 'ls -l LOC';
    return (\@commands, \%alias);
}

sub usage {
    print STDERR "usage: na COMMAND [ARG...]\n";
    exit 1;
}

sub fatal {
    print STDERR "na: @_\n";
    exit 2;
}

=pod

=head1 NAME

na - simple double-entry bookkeeping for personal finances

=head1 SYNOPSIS

B<na> import [I<ACCOUNT>...]

B<na> enter [I<DATE>] I<ACCOUNT> I<AMOUNT> I<ACCOUNT> I<DESCRIP>

=head1 JOURNAL FORMAT

The journal file (normally named C<journal>) contains all transactions that
have been entered manually or imported.

Each transaction is on a separate line; there is no provision for wrapping
transactions.

Blank lines, including lines consisting of only whitespace, are ignored.

Whole-line comments are also ignored; these consist of optional initial
whitespace followed by the pound sign C<#> and then the comment (or nothing).

=head1 TRANSACTIONS

A transaction consists of a date in the form B<YYYY-MM-DD> followed by any or
all of the following elements, each preceded by whitespace:

=over 4

=item B<Raw description>

Any text, enclosed in curly braces:

    {ACME SMALL APPLIANCE REPAIR INC}

=item B<Cooked description>

A sequence of words, each beginning with an alphanumeric character or one of the characters C<(> C<"> C<'>:

    Acme (toaster)

=item B<Account or category>

Every account element except the last must be followed by an amount.

The amounts in a transaction must add up to zero.

If the last account is not followed by an amount, the amount is inferred -- it
is the amount which, when added to the other amounts, yields the value zero.



=item B<Amount>




=back

